import asyncio
import logging
import sys
import json
import random
from datetime import datetime
from os.path import exists

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8269461372:AAFt2r92GoVh7tG9uHcsSyh2rG_rH5UJcP8"
PHOTO_PATH = "/Users/nikitakurlov/eToro/etoro.png"
PROFILE_PHOTO_PATH = "/Users/nikitakurlov/eToro/image copy.png"
TRADING_PHOTO_PATH = "/Users/nikitakurlov/eToro/image copy.png"
USERS_DATA_FILE = "/Users/nikitakurlov/eToro/users_data.json"
TRADE_HISTORY_FILE = "/Users/nikitakurlov/eToro/trade_history.json"
WORKER_CONFIG_FILE = "/Users/nikitakurlov/eToro/worker_config.json"
REQUISITES_FILE = "/Users/nikitakurlov/eToro/requisites.json"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
CRYPTO_CURRENCIES = [
    "‚Çø Bitcoin (BTC)", "Œû Ethereum (ETH)", "‚ÇÆ Tether (USDT)", "‚Çø Bitcoin Cash (BCH)",
    "≈Å Litecoin (LTC)", "‚óä Cardano (ADA)", "‚óä Polkadot (DOT)", "‚óä Chainlink (LINK)",
    "‚óä Stellar (XLM)", "‚óä Uniswap (UNI)"
]

# –ú–∞–ø–ø–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏
CRYPTO_CHART_URLS = {
    "‚Çø Bitcoin (BTC)": "https://nikitakurlov1.github.io/GraphcoinOKX/ethereum.html",
    "Œû Ethereum (ETH)": "https://nikitakurlov1.github.io/GraphcoinOKX/ethereum.html",
    "‚ÇÆ Tether (USDT)": "https://nikitakurlov1.github.io/GraphcoinOKX/tron.html",
    "‚Çø Bitcoin Cash (BCH)": "https://nikitakurlov1.github.io/GraphcoinOKX/litecoin.html",
    "≈Å Litecoin (LTC)": "https://nikitakurlov1.github.io/GraphcoinOKX/litecoin.html",
    "‚óä Cardano (ADA)": "https://nikitakurlov1.github.io/GraphcoinOKX/cardano.html",
    "‚óä Polkadot (DOT)": "https://nikitakurlov1.github.io/GraphcoinOKX/avalanche.html",
    "‚óä Chainlink (LINK)": "https://nikitakurlov1.github.io/GraphcoinOKX/ripple.html",
    "‚óä Stellar (XLM)": "https://nikitakurlov1.github.io/GraphcoinOKX/ton.html",
    "‚óä Uniswap (UNI)": "https://nikitakurlov1.github.io/GraphcoinOKX/shib.html"
}

# –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–∫—Ü–∏–π (—Ä–∞–Ω–¥–æ–º–Ω–æ)
STOCK_CHART_URLS = [
    "https://nikitakurlov1.github.io/GraphcoinOKX/ethereum.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/litecoin.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/cardano.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/ripple.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/bnb.html"
]

# –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Å—ã—Ä—å—è (—Ä–∞–Ω–¥–æ–º–Ω–æ)
COMMODITY_CHART_URLS = [
    "https://nikitakurlov1.github.io/GraphcoinOKX/terra.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/tron.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/doge.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/avalanche.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/ton.html",
    "https://nikitakurlov1.github.io/GraphcoinOKX/shib.html"
]

RUSSIAN_STOCKS = [
    "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)", "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)", "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)", "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)",
    "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)", "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)", "üè≠ –ù–õ–ú–ö (NLMK)", "üè≠ –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)",
    "üè≠ –ú–ú–ö (MAGN)", "üè≠ –ê–õ–†–û–°–ê (ALRS)"
]

COMMODITIES = [
    "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)", "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)", "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)", "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)",
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)", "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)", "‚òï –ö–æ—Ñ–µ (COFFEE)", "üç´ –ö–∞–∫–∞–æ (COCOA)",
    "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)", "üçØ –°–∞—Ö–∞—Ä (SUGAR)"
]

ASSET_PRICES = {
    "‚Çø Bitcoin (BTC)": 4500000, "Œû Ethereum (ETH)": 280000, "‚ÇÆ Tether (USDT)": 95,
    "‚Çø Bitcoin Cash (BCH)": 45000, "≈Å Litecoin (LTC)": 12000, "‚óä Cardano (ADA)": 45,
    "‚óä Polkadot (DOT)": 380, "‚óä Chainlink (LINK)": 1200, "‚óä Stellar (XLM)": 8,
    "‚óä Uniswap (UNI)": 180, "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)": 180, "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)": 7200,
    "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)": 280, "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)": 1.2, "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)": 18000,
    "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)": 4200, "üè≠ –ù–õ–ú–ö (NLMK)": 180, "üè≠ –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)": 1200,
    "üè≠ –ú–ú–ö (MAGN)": 45, "üè≠ –ê–õ–†–û–°–ê (ALRS)": 120, "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)": 6500,
    "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)": 85, "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)": 6500, "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)": 120,
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)": 18000, "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)": 15000, "‚òï –ö–æ—Ñ–µ (COFFEE)": 450,
    "üç´ –ö–∞–∫–∞–æ (COCOA)": 280, "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)": 35000, "üçØ –°–∞—Ö–∞—Ä (SUGAR)": 65
}

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
users_data = {}
trading_states = {}
trade_message_ids = {}
authorized_workers = set()
worker_states = {}
worker_config = {}

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global users_data
    try:
        if exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                users_data = {str(k): v for k, v in json.load(f).items()}
            for user_id, user_data in users_data.items():
                user_data.setdefault('pending_withdrawal', 0.0)
                user_data.setdefault('verified', False)
                user_data.setdefault('username', "")
            save_users_data()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_trade_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if exists(TRADE_HISTORY_FILE):
            with open(TRADE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return {str(k): v for k, v in json.load(f).items()}
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
        return {}

def save_trade_history(trade_history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(TRADE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(trade_history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")

def load_worker_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    global worker_config
    try:
        if exists(WORKER_CONFIG_FILE):
            with open(WORKER_CONFIG_FILE, 'r', encoding='utf-8') as f:
                worker_config = {str(k): v for k, v in json.load(f).items()}
        else:
            worker_config = {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        worker_config = {}

def save_worker_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–∫–µ—Ä–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open(WORKER_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(worker_config, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞: {e}")

def load_requisites():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if exists(REQUISITES_FILE):
            with open(REQUISITES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            "bank_card": "1234 5678 9012 3456",
            "bank_name": "–°–±–µ—Ä–±–∞–Ω–∫",
            "cardholder_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            "crypto_wallet": "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh",
            "crypto_type": "Bitcoin (BTC)"
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")
        return {}

def save_requisites(requisites):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open(REQUISITES_FILE, 'w', encoding='utf-8') as f:
            json.dump(requisites, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")

def get_user_worker_config(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)
    if user_id_str not in worker_config:
        worker_config[user_id_str] = {
            "trade_mode": "random",
            "win_coefficient": 1.0,
            "custom_balance": None
        }
        save_worker_config()
    return worker_config[user_id_str]

def add_trade_to_history(user_id: int, trade_data: dict, result: str, win_amount: float, new_balance: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    trade_history = load_trade_history()
    user_id_str = str(user_id)
    
    if user_id_str not in trade_history:
        trade_history[user_id_str] = []
    
    trade_record = {
        "id": len(trade_history[user_id_str]) + 1,
        "timestamp": datetime.now().isoformat(),
        "asset": trade_data['asset_name'],
        "direction": trade_data['direction'],
        "amount": trade_data['amount'],
        "time_sec": trade_data['time_sec'],
        "leverage": trade_data.get('leverage', 1.0),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ—á–æ
        "result": result,
        "win_amount": win_amount,
        "new_balance": new_balance
    }
    
    trade_history[user_id_str].append(trade_record)
    save_trade_history(trade_history)

def get_user_data(user_id, username=""):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
    user_id_str = str(user_id)
    if user_id_str not in users_data:
        join_date = datetime.now()
        users_data[user_id_str] = {
            "accepted_terms": False,
            "balance": 0.0,
            "pending_withdrawal": 0.0,
            "verified": False,
            "join_date": join_date.isoformat(),
            "username": username or ""
        }
        save_users_data()
    
    user_data = users_data[user_id_str]
    if username and not user_data.get("username"):
        user_data["username"] = username
        save_users_data()
    
    join_date = datetime.fromisoformat(user_data["join_date"])
    days_on_platform = (datetime.now() - join_date).days
    user_data["days_on_platform"] = max(1, days_on_platform)
    
    return user_data

def create_static_menu():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìà –¢–æ—Ä–≥–æ–≤–ª—è"))
    builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    builder.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@router.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_data = get_user_data(user_id, username)
    
    if user_data["accepted_terms"]:
        await show_user_profile(message)
        return
    
    if not exists(PHOTO_PATH):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PHOTO_PATH}")
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    photo_to_send = FSInputFile(PHOTO_PATH)
    welcome_text = (
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ eToro!</b>\n\n"
        "üìä <b>–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è</b>\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üí° –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
        "‚úÖ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n\n"
        "üìú <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</i>"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú", url="https://telegra.ph/Usloviya-servisa-eTron-10-23")
    builder.button(text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ", callback_data="accept_terms")
    builder.adjust(1)

    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    user_data["accepted_terms"] = True
    save_users_data()
    
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)
    
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_data = get_user_data(user_id, username)
    except Exception as e:
        logging.error(f"Error getting user data: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    current_hour = datetime.now().hour
    online_users = random.randint(1200, 1800) if 6 <= current_hour <= 22 else random.randint(800, 1200)
    
    profile_text = (
        f"üë§ <b>eToro ‚Ä¢ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ <b>–ù–∞ –≤—ã–≤–æ–¥–µ:</b> {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìÖ <b>–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:</b> {user_data['days_on_platform']} –¥–Ω.\n"
        f"‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n"
        f"üÜî <b>ID:</b> <code>{user_id}</code>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üü¢ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}</i>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)
    
    try:
        if exists(PROFILE_PHOTO_PATH):
            photo = FSInputFile(PROFILE_PHOTO_PATH)
            try:
                await message.answer_photo(
                    photo=photo,
                    caption=profile_text,
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.HTML
                )
            except Exception as photo_error:
                logging.warning(f"Failed to send photo: {photo_error}, sending text only")
                await message.answer(
                    profile_text,
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.HTML
                )
        else:
            await message.answer(
                profile_text,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_static_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    requisites = load_requisites()
    
    text = (
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="deposit_bank"))
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="deposit_crypto"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))
    builder.adjust(2, 1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()

@router.callback_query(F.data == "deposit_bank")
async def handle_deposit_bank(callback: CallbackQuery):
    requisites = load_requisites()
    
    text = (
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É</b>\n\n"
        f"üè¶ –ë–∞–Ω–∫: {requisites.get('bank_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>{requisites.get('bank_card', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {requisites.get('cardholder_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deposit"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()

@router.callback_query(F.data == "deposit_crypto")
async def handle_deposit_crypto(callback: CallbackQuery):
    requisites = load_requisites()
    
    text = (
        "‚Çø <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</b>\n\n"
        f"üíé –í–∞–ª—é—Ç–∞: {requisites.get('crypto_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìß –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n<code>{requisites.get('crypto_wallet', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n\n"
        "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
        "2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–µ—Ç–∏"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="deposit"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data.get('verified', False):
        await callback.answer(
            "‚ö†Ô∏è –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    min_withdraw = 1000.0
    if user_data['balance'] < min_withdraw:
        await callback.answer(
            f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_withdraw:.2f} ‚ÇΩ\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ",
            show_alert=True
        )
        return
    
    text = (
        "üí∞ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data.get('pending_withdrawal', 0):.2f} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="withdraw_bank"))
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="withdraw_crypto"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))
    builder.adjust(2, 1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("withdraw_"))
async def handle_withdraw_method(callback: CallbackQuery):
    method = callback.data.split("_")[1]
    method_name = "–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É" if method == "bank" else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"
    
    text = (
        f"üí∞ <b>–í—ã–≤–æ–¥ –Ω–∞ {method_name}</b>\n\n"
        "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:\n"
        "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
        "3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏\n\n"
        "‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-24 —á–∞—Å–∞\n"
        "üíº –ö–æ–º–∏—Å—Å–∏—è: 0%"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="withdraw"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    user_id_str = str(user_id)
    
    if user_id_str not in trade_history or not trade_history[user_id_str]:
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except TelegramBadRequest:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    user_trades = trade_history[user_id_str][-10:]
    user_trades.reverse()
    
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        result_emoji = "üéâ" if trade['result'] == "–ü–æ–±–µ–¥–∞" else "üò•"
        result_text = f"+{trade['win_amount']:,.2f} RUB" if trade['result'] == "–ü–æ–±–µ–¥–∞" else f"-{trade['amount']:,.2f} RUB"
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        leverage = trade.get('leverage', 1.0)
        
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']} ‚Ä¢ x{leverage:.1f}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    total_trades = len(trade_history[user_id_str])
    wins = len([t for t in trade_history[user_id_str] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    await show_user_profile(callback.message)
    await callback.answer()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = (
        "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "üìß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
        "üí¨ <i>–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!</i>"
    )
    await message.answer(support_text, parse_mode=ParseMode.HTML)

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    info_text = (
        "‚ÑπÔ∏è <b>–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ eToro</b>\n\n"
        "üìä eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n\n"
        "‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "‚úÖ –ê–∫—Ü–∏–∏\n"
        "‚úÖ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç 10 —Å–µ–∫—É–Ω–¥!\n"
        "üéØ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ x10\n"
        "üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ—Ç 1 ‚ÇΩ"
    )
    await message.answer(info_text, parse_mode=ParseMode.HTML)

@router.message(Command("worker1236"))
async def handle_worker_auth(message: Message):
    user_id = message.from_user.id
    authorized_workers.add(user_id)
    await show_worker_panel(message)

async def show_worker_panel(message: Message):
    text = (
        "üîß <b>–ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üë• –ú–æ–∏ –º–∞–º–º–æ–Ω—Ç—ã", callback_data="worker_mammonts"))
    builder.add(types.InlineKeyboardButton(text="üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="worker_requisites"))
    builder.add(types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="worker_broadcast"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

@router.message(F.text)
async def handle_worker_text_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    worker_id = message.from_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    if worker_id in trading_states and trading_states[worker_id].get('step') == 'waiting_amount':
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
            text = message.text.strip().replace(',', '.').replace(' ', '')
            if text.replace('.', '', 1).replace('-', '', 1).isdigit():
                logging.info(f"Processing numeric input '{message.text}' for investment by user {worker_id}")
                await handle_investment_amount(message)
                return
        except Exception as e:
            logging.error(f"Error processing numeric input: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ—Ä–∫–µ—Ä–∞
    if worker_id in worker_states and worker_id in authorized_workers:
        state = worker_states[worker_id]
        action = state.get('action')
        
        if action == 'set_balance':
            try:
                new_balance = float(message.text)
                target_user_id = state['target_user_id']
                
                if target_user_id in users_data:
                    users_data[target_user_id]['balance'] = new_balance
                    save_users_data()
                    username = users_data[target_user_id].get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    await message.answer(
                        f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üÜî ID: {target_user_id}\n"
                        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.2f} ‚ÇΩ",
                        parse_mode=ParseMode.HTML
                    )
                    del worker_states[worker_id]
                else:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    del worker_states[worker_id]
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50)")
            return
        
        elif action == 'send_message':
            target_user_id = state['target_user_id']
            try:
                await message.bot.send_message(
                    chat_id=int(target_user_id),
                    text=f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{message.text}",
                    parse_mode=ParseMode.HTML
                )
                await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                del worker_states[worker_id]
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return
        
        elif action == 'edit_bank_requisites':
            lines = message.text.strip().split('\n')
            if len(lines) >= 3:
                requisites = load_requisites()
                requisites['bank_card'] = lines[0].strip()
                requisites['bank_name'] = lines[1].strip()
                requisites['cardholder_name'] = lines[2].strip()
                save_requisites(requisites)
                await message.answer("‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                del worker_states[worker_id]
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 —Å—Ç—Ä–æ–∫–∏: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –±–∞–Ω–∫, –≤–ª–∞–¥–µ–ª–µ—Ü")
            return
        
        elif action == 'edit_crypto_requisites':
            lines = message.text.strip().split('\n')
            if len(lines) >= 2:
                requisites = load_requisites()
                requisites['crypto_type'] = lines[0].strip()
                requisites['crypto_wallet'] = lines[1].strip()
                save_requisites(requisites)
                await message.answer("‚úÖ –ö—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                del worker_states[worker_id]
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Å—Ç—Ä–æ–∫–∏: —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
            return
        
        elif action == 'broadcast':
            bot = message.bot
            success_count = 0
            fail_count = 0
            
            for user_id in users_data.keys():
                try:
                    await bot.send_message(
                        chat_id=int(user_id),
                        text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{message.text}",
                        parse_mode=ParseMode.HTML
                    )
                    success_count += 1
                except (TelegramBadRequest, TelegramForbiddenError) as e:
                    fail_count += 1
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"–û—à–∏–±–æ–∫: {fail_count}"
            )
            del worker_states[worker_id]
            return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ" —Å–æ–æ–±—â–µ–Ω–∏–π

async def handle_investment_amount(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logging.info(f"Investment handler called for user {user_id} with text '{message.text}'")
    logging.info(f"User in trading_states: {user_id in trading_states}")
    if user_id in trading_states:
        logging.info(f"Trading state step: {trading_states[user_id].get('step')}")
    
    # Skip if this is a worker setting balance or other worker action
    if user_id in worker_states and user_id in authorized_workers:
        logging.info(f"Skipping - user is worker in worker_states")
        return
    
    # Check if user is in trading state waiting for amount
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        logging.info(f"Skipping - user not in correct trading state")
        return
    
    user_data = get_user_data(user_id, username)
    
    try:
        amount = float(message.text)
        
        if amount < 1:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>1 RUB</b>\n"
                "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 —Ä—É–±–ª—è",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å—É–º–º—É, –∞ –Ω–µ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        # –ü–ª–µ—á–æ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫, –∞ –Ω–µ –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å
        leverage = trading_states[user_id].get('leverage', 1.0)
        
        if amount > user_data['balance']:
            await message.answer(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
                f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']:,.2f} RUB\n"
                f"üí∞ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> {amount:,.2f} RUB\n\n"
                f"üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É",
                parse_mode=ParseMode.HTML
            )
            return
        
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    leverage = trade_data.get('leverage', 1.0)
    
    config_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {trade_data['amount']:,.2f} RUB\n"
        f"üìà <b>–ê–∫—Ç–∏–≤:</b> {trade_data.get('asset_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"‚ÜïÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trade_data.get('direction', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"üí° <i>–ü—Ä–æ–≥–Ω–æ–∑: –∫—É—Ä—Å –ø–æ–π–¥–µ—Ç –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑?</i>\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</b> {trade_data.get('time_sec', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"üí° <i>–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É?</i>\n\n"
        f"üìä <b>–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:</b> x{leverage:.1f}\n"
        f"üí° <i>–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∏—Å–∫</i>\n\n"
        f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'</b>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="x1", callback_data="trade_set_leverage:1.0"))
    builder.add(types.InlineKeyboardButton(text="x2", callback_data="trade_set_leverage:2.0"))
    builder.add(types.InlineKeyboardButton(text="x5", callback_data="trade_set_leverage:5.0"))
    builder.add(types.InlineKeyboardButton(text="x10", callback_data="trade_set_leverage:10.0"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 4, 1, 1)
    
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    trade_message_ids[user_id] = sent_message.message_id

@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    direction = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trading_states[user_id]['direction'] = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" if direction == "up" else "‚¨áÔ∏è –í–Ω–∏–∑"
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_time:"))
async def handle_time_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    time_sec = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trading_states[user_id]['time_sec'] = f"{time_sec} —Å–µ–∫"
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_leverage:"))
async def handle_leverage_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    leverage = float(callback.data.split(":")[1])
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trading_states[user_id]['leverage'] = leverage
    logging.info(f"User {user_id} selected leverage: x{leverage:.1f}")
    await update_trade_configurator(callback, user_id)
    await callback.answer(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: x{leverage:.1f}")

async def update_trade_configurator(callback: CallbackQuery, user_id: int):
    trade_data = trading_states[user_id]
    leverage = trade_data.get('leverage', 1.0)
    
    config_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {trade_data['amount']:,.2f} RUB\n"
        f"üìà <b>–ê–∫—Ç–∏–≤:</b> {trade_data.get('asset_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"‚ÜïÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trade_data.get('direction', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"üí° <i>–ü—Ä–æ–≥–Ω–æ–∑: –∫—É—Ä—Å –ø–æ–π–¥–µ—Ç –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑?</i>\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</b> {trade_data.get('time_sec', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"üí° <i>–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É?</i>\n\n"
        f"üìä <b>–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:</b> x{leverage:.1f}\n"
        f"üí° <i>–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∏—Å–∫</i>\n\n"
        f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'</b>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="x1", callback_data="trade_set_leverage:1.0"))
    builder.add(types.InlineKeyboardButton(text="x2", callback_data="trade_set_leverage:2.0"))
    builder.add(types.InlineKeyboardButton(text="x5", callback_data="trade_set_leverage:5.0"))
    builder.add(types.InlineKeyboardButton(text="x10", callback_data="trade_set_leverage:10.0"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 4, 1, 1)
    
    try:
        await callback.message.edit_text(
            config_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: {e}")

@router.callback_query(F.data == "trade_reset_to_amount")
async def handle_reset_to_amount(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trading_states[user_id]['step'] = 'waiting_amount'
    trading_states[user_id]['amount'] = None
    trading_states[user_id]['direction'] = None
    trading_states[user_id]['time_sec'] = None
    
    user_data = get_user_data(user_id)
    reset_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB\n\nüåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    try:
        await callback.message.edit_text(
            reset_text,
            reply_markup=None
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "trade_create_deal")
async def handle_create_deal(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trade_data = trading_states[user_id]
    
    if not trade_data.get('direction') or not trade_data.get('time_sec'):
        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    await execute_trade(callback, user_id)
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

async def execute_trade(callback: CallbackQuery, user_id: int):
    trade_data = trading_states[user_id]
    user_data = get_user_data(user_id)
    
    user_config = get_user_worker_config(user_id)
    time_seconds = int(trade_data['time_sec'].split()[0])
    
    await run_trade_timer(callback, user_id, time_seconds)
    
    # Determine trade result based on worker configuration
    trade_mode = user_config.get('trade_mode', 'random')
    
    if trade_mode == 'always_win':
        is_win = True
        logging.info(f"User {user_id} trade mode: always_win - Result: WIN")
    elif trade_mode == 'always_lose':
        is_win = False
        logging.info(f"User {user_id} trade mode: always_lose - Result: LOSE")
    else:  # random mode
        is_win = random.choice([True, False])
        logging.info(f"User {user_id} trade mode: random - Result: {'WIN' if is_win else 'LOSE'}")
    
    leverage = trade_data.get('leverage', 1.0)
    
    if is_win:
        win_coefficient = user_config.get('win_coefficient', 1.0)
        win_amount = trade_data['amount'] * win_coefficient * leverage  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ
        logging.info(f"User {user_id} WIN: amount={trade_data['amount']}, coefficient={win_coefficient}, leverage={leverage}, win_amount={win_amount}")
        user_data['balance'] += win_amount
        save_users_data()
        
        add_trade_to_history(user_id, trade_data, "–ü–æ–±–µ–¥–∞", win_amount, user_data['balance'])
        
        result_text = (
            f"üéâ <b>–ü–û–ë–ï–î–ê!</b> üéâ\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"‚úÖ <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> +{win_amount:,.2f} RUB\n"
            f"üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {win_coefficient}x\n"
            f"üìä <b>–ü–ª–µ—á–æ:</b> x{leverage:.1f}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']:,.2f} RUB\n\n"
            f"üöÄ <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!</i>"
        )
    else:
        loss_amount = trade_data['amount']  # –£–±—ã—Ç–æ–∫ —Ä–∞–≤–µ–Ω —Ç–æ–ª—å–∫–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º–µ
        user_data['balance'] = max(0, user_data['balance'] - loss_amount)
        save_users_data()
        
        add_trade_to_history(user_id, trade_data, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", 0, user_data['balance'])
        
        result_text = (
            f"üòî <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"‚ùå <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å —É–±—ã—Ç–∫–æ–º</b>\n\n"
            f"üìâ <b>–ü–æ—Ç–µ—Ä—è:</b> -{loss_amount:,.2f} RUB\n"
            f"üìä <b>–ü–ª–µ—á–æ:</b> x{leverage:.1f}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']:,.2f} RUB\n\n"
            f"üí™ <i>–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –°–ª–µ–¥—É—é—â–∞—è —Å–¥–µ–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π!</i>"
        )
    
    await callback.message.answer(result_text, parse_mode=ParseMode.HTML)
    
    if user_id in trading_states:
        del trading_states[user_id]
    if user_id in trade_message_ids:
        del trade_message_ids[user_id]

async def run_trade_timer(callback: CallbackQuery, user_id: int, total_seconds: int):
    trade_data = trading_states[user_id]
    
    for remaining in range(total_seconds, 0, -1):
        progress_bar = create_progress_bar(remaining, total_seconds)
        
        timer_text = (
            f"‚è≥ <b>–°–î–ï–õ–ö–ê –ê–ö–¢–ò–í–ù–ê</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìä <b>–ê–∫—Ç–∏–≤:</b> {trade_data['asset_name']}\n"
            f"‚ÜïÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trade_data['direction']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {trade_data['amount']:,.2f} RUB\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining} —Å–µ–∫\n\n"
            f"{progress_bar}\n\n"
            f"üí° <i>–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...</i>"
        )
        
        try:
            await callback.message.edit_text(
                timer_text,
                reply_markup=None,
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            break
        
        await asyncio.sleep(1)
    
    final_text = (
        f"‚è∞ <b>–°–î–ï–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìä <b>–ê–∫—Ç–∏–≤:</b> {trade_data['asset_name']}\n"
        f"‚ÜïÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trade_data['direction']}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {trade_data['amount']:,.2f} RUB\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üîé <b>–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...</b>"
    )
    
    try:
        await callback.message.edit_text(
            final_text,
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def create_progress_bar(remaining: int, total: int) -> str:
    percentage = (remaining / total) * 100
    filled_blocks = int((percentage / 100) * 12)
    empty_blocks = 12 - filled_blocks
    filled_char = "üü©"
    empty_char = "‚¨ú"
    progress_bar = filled_char * filled_blocks + empty_char * empty_blocks
    time_emoji = "üü¢" if percentage > 80 else "üü°" if percentage > 60 else "üü†" if percentage > 30 else "üî¥"
    return f"{time_emoji} {progress_bar} {percentage:.0f}%"

async def show_trading_categories(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    text = (
        "üìä <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞</b>\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</i>\n\n"
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã\n"
        "üìà <b>–ê–∫—Ü–∏–∏</b> - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "ü•á <b>–°—ã—Ä—å–µ</b> - –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç 10 —Å–µ–∫—É–Ω–¥!"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="trade_crypto"))
    builder.add(types.InlineKeyboardButton(text="üìà –ê–∫—Ü–∏–∏", callback_data="trade_stocks"))
    builder.add(types.InlineKeyboardButton(text="ü•á –°—ã—Ä—å–µ", callback_data="trade_commodities"))
    builder.adjust(3)
    
    try:
        if exists(TRADING_PHOTO_PATH):
            photo = FSInputFile(TRADING_PHOTO_PATH)
            try:
                await message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.HTML
                )
            except Exception as photo_error:
                logging.warning(f"Failed to send trading photo: {photo_error}")
                await message.answer(
                    text,
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.HTML
                )
        else:
            await message.answer(
                text,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "trade_crypto")
async def handle_crypto_trading(callback: CallbackQuery):
    await edit_to_crypto_list(callback)
    await callback.answer()

@router.callback_query(F.data == "trade_stocks")
async def handle_stocks_trading(callback: CallbackQuery):
    await edit_to_stocks_list(callback)
    await callback.answer()

@router.callback_query(F.data == "trade_commodities")
async def handle_commodities_trading(callback: CallbackQuery):
    await edit_to_commodities_list(callback)
    await callback.answer()

@router.callback_query(F.data == "back_to_categories")
async def handle_back_to_categories(callback: CallbackQuery):
    await edit_to_trading_categories(callback)
    await callback.answer()

async def edit_to_trading_categories(callback: CallbackQuery):
    text = (
        "üìä <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞</b>\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</i>\n\n"
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã\n"
        "üìà <b>–ê–∫—Ü–∏–∏</b> - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "ü•á <b>–°—ã—Ä—å–µ</b> - –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç 10 —Å–µ–∫—É–Ω–¥!"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="trade_crypto"))
    builder.add(types.InlineKeyboardButton(text="üìà –ê–∫—Ü–∏–∏", callback_data="trade_stocks"))
    builder.add(types.InlineKeyboardButton(text="ü•á –°—ã—Ä—å–µ", callback_data="trade_commodities"))
    builder.adjust(3)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_trading_categories(callback.message)

async def edit_to_crypto_list(callback: CallbackQuery):
    text = (
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏</i>\n"
        "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã\n\n"
        "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤:</b>"
    )
    
    builder = InlineKeyboardBuilder()
    for i, crypto in enumerate(CRYPTO_CURRENCIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {crypto}", callback_data=f"select_crypto_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_crypto_list(callback.message)

async def edit_to_stocks_list(callback: CallbackQuery):
    text = (
        "üìà <b>–ê–∫—Ü–∏–∏ –†–æ—Å—Å–∏–∏</b>\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏</i>\n"
        "üá∑üá∫ –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤:</b>"
    )
    
    builder = InlineKeyboardBuilder()
    for i, stock in enumerate(RUSSIAN_STOCKS, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {stock}", callback_data=f"select_stock_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_stocks_list(callback.message)

async def edit_to_commodities_list(callback: CallbackQuery):
    text = (
        "ü•á <b>–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏</i>\n"
        "üåé –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–µ–ª—å—Ö–æ–∑–∫—É–ª—å—Ç—É—Ä—ã\n\n"
        "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤:</b>"
    )
    
    builder = InlineKeyboardBuilder()
    for i, commodity in enumerate(COMMODITIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {commodity}", callback_data=f"select_commodity_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_commodities_list(callback.message)

async def show_crypto_list(message: Message):
    text = "‚Çø –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, crypto in enumerate(CRYPTO_CURRENCIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {crypto}", callback_data=f"select_crypto_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

async def show_stocks_list(message: Message):
    text = "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, stock in enumerate(RUSSIAN_STOCKS, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {stock}", callback_data=f"select_stock_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

async def show_commodities_list(message: Message):
    text = "ü•á –í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, commodity in enumerate(COMMODITIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {commodity}", callback_data=f"select_commodity_{i}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("select_crypto_"))
async def handle_crypto_selection(callback: CallbackQuery):
    crypto_index = int(callback.data.split("_")[-1]) - 1
    if 0 <= crypto_index < len(CRYPTO_CURRENCIES):
        selected_crypto = CRYPTO_CURRENCIES[crypto_index]
        await show_asset_page(callback, selected_crypto, "crypto")
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞", show_alert=True)
    await callback.answer()

@router.callback_query(F.data.startswith("select_stock_"))
async def handle_stock_selection(callback: CallbackQuery):
    stock_index = int(callback.data.split("_")[-1]) - 1
    if 0 <= stock_index < len(RUSSIAN_STOCKS):
        selected_stock = RUSSIAN_STOCKS[stock_index]
        await show_asset_page(callback, selected_stock, "stocks")
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞", show_alert=True)
    await callback.answer()

@router.callback_query(F.data.startswith("select_commodity_"))
async def handle_commodity_selection(callback: CallbackQuery):
    commodity_index = int(callback.data.split("_")[-1]) - 1
    if 0 <= commodity_index < len(COMMODITIES):
        selected_commodity = COMMODITIES[commodity_index]
        await show_asset_page(callback, selected_commodity, "commodities")
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞", show_alert=True)
    await callback.answer()

async def show_asset_page(callback: CallbackQuery, asset_name: str, category: str):
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    asset_price = ASSET_PRICES.get(asset_name, 0)
    
    asset_text = (
        f"üìä <b>{asset_name}</b>\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {asset_price:,.0f} ‚ÇΩ\n"
        f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üî• <b>–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—è!</b>\n\n"
        f"üí° <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 ‚ÇΩ</i>\n"
        f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n"
        f"<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)</i>"
    )
    
    trading_states[user_id] = {
        'step': 'waiting_amount',
        'amount': None,
        'direction': None,
        'time_sec': None,
        'asset_name': asset_name,
        'asset_price': asset_price,
        'leverage': 1.0  # –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é x1
    }
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üìä –û–±–∑–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞", callback_data=f"chart_{category}:{asset_name}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_{category}"))
    builder.adjust(2)
    
    try:
        await callback.message.edit_caption(
            caption=asset_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(
            asset_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data.startswith("chart_"))
async def handle_chart_button(callback: CallbackQuery):
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: chart_{category}:{asset_name}
        data_parts = callback.data.split(":", 1)
        if len(data_parts) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞", show_alert=True)
            return
        
        category = data_parts[0].replace("chart_", "")
        asset_name = data_parts[1]
        
        chart_url = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == "crypto":
            chart_url = CRYPTO_CHART_URLS.get(asset_name)
        elif category == "stocks":
            chart_url = random.choice(STOCK_CHART_URLS)
        elif category == "commodities":
            chart_url = random.choice(COMMODITY_CHART_URLS)
        
        if chart_url:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="üìä –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫", url=chart_url))
            builder.adjust(1)
            
            await callback.message.answer(
                f"üìà <b>–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {asset_name}</b>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫:",
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
        else:
            await callback.answer("‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("back_to_"))
async def handle_back_to_category(callback: CallbackQuery):
    category = callback.data.split("_")[2]
    
    if category == "crypto":
        await edit_to_crypto_list(callback)
    elif category == "stocks":
        await edit_to_stocks_list(callback)
    elif category == "commodities":
        await edit_to_commodities_list(callback)
    
    await callback.answer()

@router.callback_query(F.data == "worker_mammonts")
async def handle_worker_mammonts(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not users_data:
        await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    
    text = "üë• <b>–ú–æ–∏ –º–∞–º–º–æ–Ω—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    
    builder = InlineKeyboardBuilder()
    for user_id in users_data.keys():
        user_data = users_data[user_id]
        username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        button_text = f"@{username} | ID: {user_id} | {user_data.get('balance', 0):.2f} ‚ÇΩ"
        builder.add(types.InlineKeyboardButton(text=button_text, callback_data=f"worker_user_{user_id}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="worker_back_main"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data.startswith("worker_user_"))
async def handle_worker_user_profile(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = callback.data.split("_")[2]
    
    if user_id not in users_data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user_data = users_data[user_id]
    user_config = get_user_worker_config(user_id)
    
    trade_history = load_trade_history()
    user_trades = trade_history.get(user_id, [])
    total_trades = len(user_trades)
    wins = len([t for t in user_trades if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üÜî ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0):.2f} ‚ÇΩ\n"
        f"üìÖ –î–Ω–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data.get('days_on_platform', 0)}\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–î–∞' if user_data.get('verified', False) else '–ù–µ—Ç'}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
        f"–ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞:</b>\n"
        f"–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {user_config['trade_mode']}\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞: {user_config['win_coefficient']:.1f}x"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"worker_balance_{user_id}"))
    builder.add(types.InlineKeyboardButton(text="üé≤ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data=f"worker_trademode_{user_id}"))
    builder.add(types.InlineKeyboardButton(text="üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data=f"worker_coef_{user_id}"))
    builder.add(types.InlineKeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"worker_message_{user_id}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="worker_mammonts"))
    builder.adjust(2, 2, 1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data.startswith("worker_trademode_"))
async def handle_worker_trademode(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = callback.data.split("_")[2]
    user_config = get_user_worker_config(user_id)
    
    text = (
        f"üé≤ <b>–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {user_config['trade_mode']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data=f"worker_setmode_{user_id}_random"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –í—Å–µ–≥–¥–∞ –ø–æ–±–µ–¥–∞", callback_data=f"worker_setmode_{user_id}_always_win"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –í—Å–µ–≥–¥–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"worker_setmode_{user_id}_always_lose"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"worker_user_{user_id}"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data.startswith("worker_setmode_"))
async def handle_worker_setmode(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Parse: worker_setmode_{user_id}_{mode}
    # Mode can contain underscores like "always_win"
    parts = callback.data.split("_")
    user_id = parts[2]
    mode = "_".join(parts[3:])  # Join all parts after user_id to handle "always_win", "always_lose"
    
    user_config = get_user_worker_config(user_id)
    user_config['trade_mode'] = mode
    save_worker_config()
    
    logging.info(f"Worker {worker_id} set trade mode to '{mode}' for user {user_id}")
    
    mode_names = {
        "random": "–°–ª—É—á–∞–π–Ω—ã–π",
        "always_win": "–í—Å–µ–≥–¥–∞ –ø–æ–±–µ–¥–∞",
        "always_lose": "–í—Å–µ–≥–¥–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ"
    }
    
    await callback.answer(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_names.get(mode, mode)}", show_alert=True)
    await handle_worker_user_profile(callback)

@router.callback_query(F.data.startswith("worker_coef_"))
async def handle_worker_coefficient(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = callback.data.split("_")[2]
    user_config = get_user_worker_config(user_id)
    
    text = (
        f"üìà <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {user_config['win_coefficient']:.1f}x\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:"
    )
    
    builder = InlineKeyboardBuilder()
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –æ—Ç 1.0 –¥–æ 3.0
    coefficients = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.5, 3.0]
    for coef in coefficients:
        builder.add(types.InlineKeyboardButton(text=f"{coef:.1f}x", callback_data=f"worker_setcoef_{user_id}_{coef}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"worker_user_{user_id}"))
    builder.adjust(3, 3, 3, 3, 1, 1)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data.startswith("worker_setcoef_"))
async def handle_worker_setcoef(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Parse: worker_setcoef_{user_id}_{coef}
    # Example: worker_setcoef_123456_1.5
    parts = callback.data.split("_")
    user_id = parts[2]
    coef = float(parts[3])  # Coefficient like "1.5", "2.0"
    
    user_config = get_user_worker_config(user_id)
    user_config['win_coefficient'] = coef
    save_worker_config()
    
    logging.info(f"Worker {worker_id} set win coefficient to {coef}x for user {user_id}")
    
    await callback.answer(f"‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {coef:.1f}x", show_alert=True)
    await handle_worker_user_profile(callback)

@router.callback_query(F.data.startswith("worker_balance_"))
async def handle_worker_balance(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = callback.data.split("_")[2]
    
    worker_states[worker_id] = {
        'action': 'set_balance',
        'target_user_id': user_id
    }
    
    text = f"üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"worker_user_{user_id}"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    
    await callback.answer()

@router.callback_query(F.data.startswith("worker_message_"))
async def handle_worker_message(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = callback.data.split("_")[2]
    
    worker_states[worker_id] = {
        'action': 'send_message',
        'target_user_id': user_id
    }
    
    text = f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"worker_user_{user_id}"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup())
    
    await callback.answer()

@router.callback_query(F.data == "worker_requisites")
async def handle_worker_requisites(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    requisites = load_requisites()
    
    text = (
        "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
        f"üè¶ –ë–∞–Ω–∫: {requisites.get('bank_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {requisites.get('bank_card', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {requisites.get('cardholder_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"‚Çø –ö—Ä–∏–ø—Ç–æ: {requisites.get('crypto_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìß –ö–æ—à–µ–ª–µ–∫: {requisites.get('crypto_wallet', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data="worker_edit_bank"))
    builder.add(types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫", callback_data="worker_edit_crypto"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="worker_back_main"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data == "worker_edit_bank")
async def handle_worker_edit_bank(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    worker_states[worker_id] = {
        'action': 'edit_bank_requisites'
    }
    
    text = (
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n"
        "–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>1234 5678 9012 3456\n"
        "–°–±–µ—Ä–±–∞–Ω–∫\n"
        "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</code>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="worker_requisites"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data == "worker_edit_crypto")
async def handle_worker_edit_crypto(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    worker_states[worker_id] = {
        'action': 'edit_crypto_requisites'
    }
    
    text = (
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>Bitcoin (BTC)\n"
        "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh</code>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="worker_requisites"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data == "worker_broadcast")
async def handle_worker_broadcast(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    worker_states[worker_id] = {
        'action': 'broadcast'
    }
    
    text = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="worker_back_main"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.callback_query(F.data == "worker_back_main")
async def handle_worker_back_main(callback: CallbackQuery):
    worker_id = callback.from_user.id
    
    if worker_id not in authorized_workers:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if worker_id in worker_states:
        del worker_states[worker_id]
    
    text = (
        "üîß <b>–ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üë• –ú–æ–∏ –º–∞–º–º–æ–Ω—Ç—ã", callback_data="worker_mammonts"))
    builder.add(types.InlineKeyboardButton(text="üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="worker_requisites"))
    builder.add(types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="worker_broadcast"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    
    await callback.answer()

@router.message()
async def handle_unhandled_messages(message: Message):
    """Fallback handler –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∂–¥—ë—Ç –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if user_id in trading_states and trading_states[user_id].get('step') == 'waiting_amount':
        await message.answer(
            "üí° <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 1000.50\n\n"
            "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    help_text = (
        "‚ùì <b>–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n"
        "üìà <b>–¢–æ—Ä–≥–æ–≤–ª—è</b> - –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML, reply_markup=create_static_menu())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        stream=sys.stdout
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        load_users_data()
        load_worker_config()
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logging.critical("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ø–∏—à–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher()
        dp.include_router(router)

        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
        print("\n‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π: {e}")