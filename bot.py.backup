import asyncio
import logging
import sys
import json
import random
from datetime import datetime, timedelta
from os.path import exists # –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –í–ê–® TOKEN, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = "8269461372:AAFt2r92GoVh7tG9uHcsSyh2rG_rH5UJcP8" 

# –í–ê–® –ü–£–¢–¨ –∫ —Ñ–∞–π–ª—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ê–ë–°–û–õ–Æ–¢–ù–û –í–ï–†–ù–´–ô
PHOTO_PATH = "/Users/nikitakurlov/eToro/etoro.png" 
PROFILE_PHOTO_PATH = "/Users/nikitakurlov/eToro/2025-10-23 18.59.25.jpg"
TRADING_PHOTO_PATH = "/Users/nikitakurlov/eToro/etoro.png"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_DATA_FILE = "/Users/nikitakurlov/eToro/users_data.json"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
TRADE_HISTORY_FILE = "/Users/nikitakurlov/eToro/trade_history.json"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
CRYPTO_CURRENCIES = [
    "‚Çø Bitcoin (BTC)",
    "Œû Ethereum (ETH)", 
    "‚ÇÆ Tether (USDT)",
    "‚Çø Bitcoin Cash (BCH)",
    "≈Å Litecoin (LTC)",
    "‚óä Cardano (ADA)",
    "‚óä Polkadot (DOT)",
    "‚óä Chainlink (LINK)",
    "‚óä Stellar (XLM)",
    "‚óä Uniswap (UNI)"
]

RUSSIAN_STOCKS = [
    "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)",
    "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)",
    "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)",
    "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)",
    "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)",
    "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)",
    "chartInstance –ù–õ–ú–ö (NLMK)",
    "chartInstance –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)",
    "chartInstance –ú–ú–ö (MAGN)",
    "chartInstance –ê–õ–†–û–°–ê (ALRS)"
]

COMMODITIES = [
    "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)",
    "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)",
    "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)",
    "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)",
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)",
    "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)",
    "‚òï –ö–æ—Ñ–µ (COFFEE)",
    "üç´ –ö–∞–∫–∞–æ (COCOA)",
    "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)",
    "üçØ –°–∞—Ö–∞—Ä (SUGAR)"
]

# –ö—É—Ä—Å—ã –∞–∫—Ç–∏–≤–æ–≤ (–≤ —Ä—É–±–ª—è—Ö)
ASSET_PRICES = {
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    "‚Çø Bitcoin (BTC)": 4500000,
    "Œû Ethereum (ETH)": 280000,
    "‚ÇÆ Tether (USDT)": 95,
    "‚Çø Bitcoin Cash (BCH)": 45000,
    "≈Å Litecoin (LTC)": 12000,
    "‚óä Cardano (ADA)": 45,
    "‚óä Polkadot (DOT)": 380,
    "‚óä Chainlink (LINK)": 1200,
    "‚óä Stellar (XLM)": 8,
    "‚óä Uniswap (UNI)": 180,
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
    "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)": 180,
    "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)": 7200,
    "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)": 280,
    "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)": 1.2,
    "chartInstance –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)": 18000,
    "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)": 4200,
    "chartInstance –ù–õ–ú–ö (NLMK)": 180,
    "chartInstance –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)": 1200,
    "chartInstance –ú–ú–ö (MAGN)": 45,
    "chartInstance –ê–õ–†–û–°–ê (ALRS)": 120,
    
    # –°—ã—Ä—å–µ
    "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)": 6500,
    "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)": 85,
    "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)": 6500,
    "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)": 120,
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)": 18000,
    "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)": 15000,
    "‚òï –ö–æ—Ñ–µ (COFFEE)": 450,
    "üç´ –ö–∞–∫–∞–æ (COCOA)": 280,
    "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)": 35000,
    "üçØ –°–∞—Ö–∞—Ä (SUGAR)": 65
}

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
users_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
trading_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
trade_message_ids = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
WITHDRAWAL_STATES = {}

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global users_data
    try:
        if exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                users_data = json.load(f)
        else:
            users_data = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, user_data in users_data.items():
            if 'balance' not in user_data or user_data['balance'] == 0:
                user_data['balance'] = 28552.71
            if 'pending_withdrawal' not in user_data:
                user_data['pending_withdrawal'] = 0.0
            if 'verified' not in user_data:
                user_data['verified'] = False
        
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_trade_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if exists(TRADE_HISTORY_FILE):
            with open(TRADE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
        return {}

def save_trade_history(trade_history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(TRADE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(trade_history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")

def add_trade_to_history(user_id: int, trade_data: dict, result: str, win_amount: float, new_balance: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history:
        trade_history[str(user_id)] = []
    
    trade_record = {
        "id": len(trade_history[str(user_id)]) + 1,
        "timestamp": datetime.now().isoformat(),
        "asset": trade_data['asset_name'],
        "direction": trade_data['direction'],
        "amount": trade_data['amount'],
        "time_sec": trade_data['time_sec'],
        "result": result,
        "win_amount": win_amount,
        "new_balance": new_balance
    }
    
    trade_history[str(user_id)].append(trade_record)
    save_trade_history(trade_history)

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
    if user_id not in users_data:
        join_date = datetime.now()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        users_data[user_id] = {
            "accepted_terms": False,
            "balance": 28552.71,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "pending_withdrawal": 0.0,  # –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤—ã–≤–æ–¥–µ
            "verified": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            "join_date": join_date.isoformat()
        }
        save_users_data()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    user_data = users_data[user_id]
    join_date = datetime.fromisoformat(user_data["join_date"])
    days_on_platform = (datetime.now() - join_date).days
    user_data["days_on_platform"] = max(1, days_on_platform)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
    
    return user_data

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å"))
    builder.add(KeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏"))
    builder.add(KeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def create_static_menu():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìà –¢–æ—Ä–≥–æ–≤–ª—è"))
    builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    builder.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@router.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if user_data["accepted_terms"]:
        await show_user_profile(message)
        return
    
    if not exists(PHOTO_PATH):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PHOTO_PATH}")
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    direction = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    trading_states[user_id]['direction'] = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" if direction == "up" else "‚¨áÔ∏è –í–Ω–∏–∑"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_time:"))
async def handle_time_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    time_sec = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    trading_states[user_id]['time_sec'] = f"{time_sec} —Å–µ–∫"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

async def update_trade_configurator(callback: CallbackQuery, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
        
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    try:
        await callback.message.edit_text(
            config_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: {e}")

@router.callback_query(F.data == "trade_reset_to_amount")
async def handle_reset_to_amount(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    trading_states[user_id]['step'] = 'waiting_amount'
    trading_states[user_id]['amount'] = None
    trading_states[user_id]['direction'] = None
    trading_states[user_id]['time_sec'] = None
    
    user_data = get_user_data(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
    reset_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB\n\nüåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    try:
        await callback.message.edit_text(
            reset_text,
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "trade_create_deal")
async def handle_create_deal(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trade_data = trading_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ
    if not trade_data.get('direction') or not trade_data.get('time_sec'):
        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    await execute_trade(callback, user_id)
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

async def execute_trade(callback: CallbackQuery, user_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_seconds = int(trade_data['time_sec'].split()[0])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    await run_trade_timer(callback, user_id, time_seconds)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ)
    is_win = random.choice([True, False])
    
    if is_win:
        # –ü–æ–±–µ–¥–∞ - —É–¥–≤–∞–∏–≤–∞–µ–º —Å—É–º–º—É
        win_amount = trade_data['amount']
        new_balance = user_data['balance'] + win_amount
        user_data['balance'] = new_balance
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ–±–µ–¥–∞", win_amount, new_balance)
        
        result_text = (
            f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –≤—ã–∏–≥—Ä—ã—à +{win_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.2f} RUB."
        )
    else:
        # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ–º —Å—É–º–º—É
        loss_amount = trade_data['amount']
        new_balance = user_data['balance'] - loss_amount
        user_data['balance'] = max(0, new_balance)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", 0, user_data['balance'])
        
        result_text = (
            f"üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ -{loss_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(result_text)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in trading_states:
        del trading_states[user_id]
    if user_id in trade_message_ids:
        del trade_message_ids[user_id]

async def run_trade_timer(callback: CallbackQuery, user_id: int, total_seconds: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    
    for remaining in range(total_seconds, 0, -1):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(remaining, total_seconds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–µ—Ä–æ–º
        timer_text = (
            f"‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {trade_data['asset_name']}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
            f"–°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n"
            f"–í—Ä–µ–º—è: {remaining} —Å–µ–∫\n\n"
            f"{progress_bar}"
        )
        
        try:
            await callback.message.edit_text(
                timer_text,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            break
        
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    final_text = (
        f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n\n"
        f"üìä –ê–∫—Ç–∏–≤: {trade_data['asset_name']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
        f"–°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n"
        f"–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
    )
    
    try:
        await callback.message.edit_text(
            final_text,
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def create_progress_bar(remaining: int, total: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    percentage = (remaining / total) * 100
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ 12 –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    filled_blocks = int((percentage / 100) * 12)
    empty_blocks = 12 - filled_blocks
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    filled_char = "üü©"  # –ó–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    empty_char = "‚¨ú"    # –ë–µ–ª—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = filled_char * filled_blocks + empty_char * empty_blocks
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    if percentage > 80:
        time_emoji = "üü¢"
    elif percentage > 60:
        time_emoji = "üü°"
    elif percentage > 30:
        time_emoji = "üü†"
    else:
        time_emoji = "üî¥"
    
    return f"{time_emoji} {progress_bar} {percentage:.0f}%"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
async def show_trading_categories(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    text = "üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="trade_crypto"))
    builder.add(types.InlineKeyboardButton(text="üìà –ê–∫—Ü–∏–∏", callback_data="trade_stocks"))
    builder.add(types.InlineKeyboardButton(text="ü•á –°—ã—Ä—å–µ", callback_data="trade_commodities"))
    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if exists(TRADING_PHOTO_PATH):
        photo = FSInputFile(TRADING_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            text,
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "trade_crypto")
async def handle_crypto_trading(callback: CallbackQuery):
    await edit_to_crypto_list(callback)
    await callback.answer()

@router.callback_query(F.data == "trade_stocks")
async def handle_stocks_trading(callback: CallbackQuery):
    await edit_to_stocks_list(callback)
    await callback.answer()

@router.callback_query(F.data == "trade_commodities")
async def handle_commodities_trading(callback: CallbackQuery):
    await edit_to_commodities_list(callback)
    await callback.answer()

@router.callback_query(F.data == "back_to_categories")
async def handle_back_to_categories(callback: CallbackQuery):
    await edit_to_trading_categories(callback)
    await callback.answer()

async def edit_to_trading_categories(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    text = "üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="trade_crypto"))
    builder.add(types.InlineKeyboardButton(text="üìà –ê–∫—Ü–∏–∏", callback_data="trade_stocks"))
    builder.add(types.InlineKeyboardButton(text="ü•á –°—ã—Ä—å–µ", callback_data="trade_commodities"))
    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_trading_categories(callback.message)

async def edit_to_crypto_list(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    text = "üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n\n‚Çø –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, crypto in enumerate(CRYPTO_CURRENCIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {crypto}", callback_data=f"select_crypto_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_crypto_list(callback.message)

async def edit_to_stocks_list(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π"""
    text = "üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n\nüìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, stock in enumerate(RUSSIAN_STOCKS, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {stock}", callback_data=f"select_stock_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_stocks_list(callback.message)

async def edit_to_commodities_list(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ —Å—ã—Ä—å—è"""
    text = "üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n\nü•á –í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, commodity in enumerate(COMMODITIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {commodity}", callback_data=f"select_commodity_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await show_commodities_list(callback.message)

async def show_crypto_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    text = "‚Çø –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, crypto in enumerate(CRYPTO_CURRENCIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {crypto}", callback_data=f"select_crypto_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

async def show_stocks_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π"""
    text = "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, stock in enumerate(RUSSIAN_STOCKS, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {stock}", callback_data=f"select_stock_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

async def show_commodities_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—ã—Ä—å—è"""
    text = "ü•á –í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"
    
    builder = InlineKeyboardBuilder()
    for i, commodity in enumerate(COMMODITIES, 1):
        builder.add(types.InlineKeyboardButton(text=f"{i}. {commodity}", callback_data=f"select_commodity_{i}"))
    
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤
@router.callback_query(F.data.startswith("select_crypto_"))
async def handle_crypto_selection(callback: CallbackQuery):
    crypto_index = int(callback.data.split("_")[-1]) - 1
    selected_crypto = CRYPTO_CURRENCIES[crypto_index]
    await show_asset_page(callback, selected_crypto, "crypto")
    await callback.answer()

@router.callback_query(F.data.startswith("select_stock_"))
async def handle_stock_selection(callback: CallbackQuery):
    stock_index = int(callback.data.split("_")[-1]) - 1
    selected_stock = RUSSIAN_STOCKS[stock_index]
    await show_asset_page(callback, selected_stock, "stocks")
    await callback.answer()

@router.callback_query(F.data.startswith("select_commodity_"))
async def handle_commodity_selection(callback: CallbackQuery):
    commodity_index = int(callback.data.split("_")[-1]) - 1
    selected_commodity = COMMODITIES[commodity_index]
    await show_asset_page(callback, selected_commodity, "commodities")
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–∞
async def show_asset_page(callback: CallbackQuery, asset_name: str, category: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞
    asset_price = ASSET_PRICES.get(asset_name, 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–∞
    asset_text = (
        f"üìä <b>{asset_name}</b>\n\n"
        f"üí∞ –ö—É—Ä—Å: {asset_price:,.0f} ‚ÇΩ\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        f"üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB\n"
        f"üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
    user_id = callback.from_user.id
    trading_states[user_id] = {
        'step': 'waiting_amount',
        'amount': None,
        'direction': None,
        'time_sec': None,
        'asset_name': asset_name,
        'asset_price': asset_price
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{category}"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_{category}"))
    builder.adjust(2)
    
    try:
        await callback.message.edit_caption(
            caption=asset_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            asset_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–∞
@router.callback_query(F.data.startswith("chart_"))
async def handle_chart_button(callback: CallbackQuery):
    category = callback.data.split("_")[1]
    await callback.answer("–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)

@router.callback_query(F.data.startswith("back_to_"))
async def handle_back_to_category(callback: CallbackQuery):
    category = callback.data.split("_")[2]
    
    if category == "crypto":
        await edit_to_crypto_list(callback)
    elif category == "stocks":
        await edit_to_stocks_list(callback)
    elif category == "commodities":
        await edit_to_commodities_list(callback)
    
    await callback.answer()

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_users_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–±—ã–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å
    if BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logging.critical("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ø–∏—à–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # skip_updates=True –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, 
    # —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ, –ø–æ–∫–∞ –æ–Ω –±—ã–ª –æ—Ñ–ª–∞–π–Ω.
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
```

```
import asyncio
import logging
import sys
import json
import random
from datetime import datetime, timedelta
from os.path import exists # –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –í–ê–® TOKEN, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = "8269461372:AAFt2r92GoVh7tG9uHcsSyh2rG_rH5UJcP8" 

# –í–ê–® –ü–£–¢–¨ –∫ —Ñ–∞–π–ª—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ê–ë–°–û–õ–Æ–¢–ù–û –í–ï–†–ù–´–ô
PHOTO_PATH = "/Users/nikitakurlov/eToro/etoro.png" 
PROFILE_PHOTO_PATH = "/Users/nikitakurlov/eToro/2025-10-23 18.59.25.jpg"
TRADING_PHOTO_PATH = "/Users/nikitakurlov/eToro/etoro.png"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_DATA_FILE = "/Users/nikitakurlov/eToro/users_data.json"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
TRADE_HISTORY_FILE = "/Users/nikitakurlov/eToro/trade_history.json"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
CRYPTO_CURRENCIES = [
    "‚Çø Bitcoin (BTC)",
    "Œû Ethereum (ETH)", 
    "‚ÇÆ Tether (USDT)",
    "‚Çø Bitcoin Cash (BCH)",
    "≈Å Litecoin (LTC)",
    "‚óä Cardano (ADA)",
    "‚óä Polkadot (DOT)",
    "‚óä Chainlink (LINK)",
    "‚óä Stellar (XLM)",
    "‚óä Uniswap (UNI)"
]

RUSSIAN_STOCKS = [
    "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)",
    "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)",
    "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)",
    "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)",
    "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)",
    "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)",
    "chartInstance –ù–õ–ú–ö (NLMK)",
    "chartInstance –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)",
    "chartInstance –ú–ú–ö (MAGN)",
    "chartInstance –ê–õ–†–û–°–ê (ALRS)"
]

COMMODITIES = [
    "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)",
    "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)",
    "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)",
    "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)",
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)",
    "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)",
    "‚òï –ö–æ—Ñ–µ (COFFEE)",
    "üç´ –ö–∞–∫–∞–æ (COCOA)",
    "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)",
    "üçØ –°–∞—Ö–∞—Ä (SUGAR)"
]

# –ö—É—Ä—Å—ã –∞–∫—Ç–∏–≤–æ–≤ (–≤ —Ä—É–±–ª—è—Ö)
ASSET_PRICES = {
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    "‚Çø Bitcoin (BTC)": 4500000,
    "Œû Ethereum (ETH)": 280000,
    "‚ÇÆ Tether (USDT)": 95,
    "‚Çø Bitcoin Cash (BCH)": 45000,
    "≈Å Litecoin (LTC)": 12000,
    "‚óä Cardano (ADA)": 45,
    "‚óä Polkadot (DOT)": 380,
    "‚óä Chainlink (LINK)": 1200,
    "‚óä Stellar (XLM)": 8,
    "‚óä Uniswap (UNI)": 180,
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
    "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)": 180,
    "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)": 7200,
    "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)": 280,
    "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)": 1.2,
    "chartInstance –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)": 18000,
    "chartInstance –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)": 4200,
    "chartInstance –ù–õ–ú–ö (NLMK)": 180,
    "chartInstance –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)": 1200,
    "chartInstance –ú–ú–ö (MAGN)": 45,
    "chartInstance –ê–õ–†–û–°–ê (ALRS)": 120,
    
    # –°—ã—Ä—å–µ
    "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)": 6500,
    "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)": 85,
    "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)": 6500,
    "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)": 120,
    "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)": 18000,
    "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)": 15000,
    "‚òï –ö–æ—Ñ–µ (COFFEE)": 450,
    "üç´ –ö–∞–∫–∞–æ (COCOA)": 280,
    "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)": 35000,
    "üçØ –°–∞—Ö–∞—Ä (SUGAR)": 65
}

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
users_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
trading_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
trade_message_ids = {}

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
WITHDRAWAL_STATES = {}

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global users_data
    try:
        if exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                users_data = json.load(f)
        else:
            users_data = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, user_data in users_data.items():
            if 'balance' not in user_data or user_data['balance'] == 0:
                user_data['balance'] = 28552.71
            if 'pending_withdrawal' not in user_data:
                user_data['pending_withdrawal'] = 0.0
            if 'verified' not in user_data:
                user_data['verified'] = False
        
        save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_trade_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if exists(TRADE_HISTORY_FILE):
            with open(TRADE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
        return {}

def save_trade_history(trade_history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(TRADE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(trade_history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")

def add_trade_to_history(user_id: int, trade_data: dict, result: str, win_amount: float, new_balance: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history:
        trade_history[str(user_id)] = []
    
    trade_record = {
        "id": len(trade_history[str(user_id)]) + 1,
        "timestamp": datetime.now().isoformat(),
        "asset": trade_data['asset_name'],
        "direction": trade_data['direction'],
        "amount": trade_data['amount'],
        "time_sec": trade_data['time_sec'],
        "result": result,
        "win_amount": win_amount,
        "new_balance": new_balance
    }
    
    trade_history[str(user_id)].append(trade_record)
    save_trade_history(trade_history)

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
    if user_id not in users_data:
        join_date = datetime.now()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        users_data[user_id] = {
            "accepted_terms": False,
            "balance": 28552.71,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "pending_withdrawal": 0.0,  # –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤—ã–≤–æ–¥–µ
            "verified": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            "join_date": join_date.isoformat()
        }
        save_users_data()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    user_data = users_data[user_id]
    join_date = datetime.fromisoformat(user_data["join_date"])
    days_on_platform = (datetime.now() - join_date).days
    user_data["days_on_platform"] = max(1, days_on_platform)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
    
    return user_data

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å"))
    builder.add(KeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏"))
    builder.add(KeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def create_static_menu():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìà –¢–æ—Ä–≥–æ–≤–ª—è"))
    builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    builder.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@router.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if user_data["accepted_terms"]:
        await show_user_profile(message)
        return
    
    if not exists(PHOTO_PATH):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PHOTO_PATH}")
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    direction = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    trading_states[user_id]['direction'] = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" if direction == "up" else "‚¨áÔ∏è –í–Ω–∏–∑"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_time:"))
async def handle_time_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    time_sec = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    trading_states[user_id]['time_sec'] = f"{time_sec} —Å–µ–∫"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

async def update_trade_configurator(callback: CallbackQuery, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
        
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    try:
        await callback.message.edit_text(
            config_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: {e}")

@router.callback_query(F.data == "trade_reset_to_amount")
async def handle_reset_to_amount(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    trading_states[user_id]['step'] = 'waiting_amount'
    trading_states[user_id]['amount'] = None
    trading_states[user_id]['direction'] = None
    trading_states[user_id]['time_sec'] = None
    
    user_data = get_user_data(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
    reset_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB\n\nüåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    try:
        await callback.message.edit_text(
            reset_text,
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "trade_create_deal")
async def handle_create_deal(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trade_data = trading_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ
    if not trade_data.get('direction') or not trade_data.get('time_sec'):
        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    await execute_trade(callback, user_id)
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

async def execute_trade(callback: CallbackQuery, user_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_seconds = int(trade_data['time_sec'].split()[0])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    await run_trade_timer(callback, user_id, time_seconds)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ)
    is_win = random.choice([True, False])
    
    if is_win:
        # –ü–æ–±–µ–¥–∞ - —É–¥–≤–∞–∏–≤–∞–µ–º —Å—É–º–º—É
        win_amount = trade_data['amount']
        new_balance = user_data['balance'] + win_amount
        user_data['balance'] = new_balance
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ–±–µ–¥–∞", win_amount, new_balance)
        
        result_text = (
            f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –≤—ã–∏–≥—Ä—ã—à +{win_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.2f} RUB."
        )
    else:
        # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ–º —Å—É–º–º—É
        loss_amount = trade_data['amount']
        new_balance = user_data['balance'] - loss_amount
        user_data['balance'] = max(0, new_balance)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", 0, user_data['balance'])
        
        result_text = (
            f"üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ -{loss_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(result_text)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in trading_states:
        del trading_states[user_id]
    if user_id in trade_message_ids:
        del trade_message_ids[user_id]

async def run_trade_timer(callback: CallbackQuery, user_id: int, total_seconds: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    
    for remaining in range(total_seconds, 0, -1):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(remaining, total_seconds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–µ—Ä–æ–º
        timer_text = (
            f"‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {trade_data['asset_name']}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
            f"–°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n"
            f"–í—Ä–µ–º—è: {remaining} —Å–µ–∫\n\n"
            f"{progress_bar}"
        )
        
        try:
            await callback.message.edit_text(
                timer_text,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            break
        
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    final_text = (
        f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n\n"
        f
```

```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    direction = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    trading_states[user_id]['direction'] = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" if direction == "up" else "‚¨áÔ∏è –í–Ω–∏–∑"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_time:"))
async def handle_time_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    time_sec = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    trading_states[user_id]['time_sec'] = f"{time_sec} —Å–µ–∫"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

async def update_trade_configurator(callback: CallbackQuery, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
        
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    try:
        await callback.message.edit_text(
            config_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: {e}")

@router.callback_query(F.data == "trade_reset_to_amount")
async def handle_reset_to_amount(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    trading_states[user_id]['step'] = 'waiting_amount'
    trading_states[user_id]['amount'] = None
    trading_states[user_id]['direction'] = None
    trading_states[user_id]['time_sec'] = None
    
    user_data = get_user_data(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
    reset_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB\n\nüåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    try:
        await callback.message.edit_text(
            reset_text,
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "trade_create_deal")
async def handle_create_deal(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trade_data = trading_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ
    if not trade_data.get('direction') or not trade_data.get('time_sec'):
        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    await execute_trade(callback, user_id)
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

async def execute_trade(callback: CallbackQuery, user_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_seconds = int(trade_data['time_sec'].split()[0])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    await run_trade_timer(callback, user_id, time_seconds)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ)
    is_win = random.choice([True, False])
    
    if is_win:
        # –ü–æ–±–µ–¥–∞ - —É–¥–≤–∞–∏–≤–∞–µ–º —Å—É–º–º—É
        win_amount = trade_data['amount']
        new_balance = user_data['balance'] + win_amount
        user_data['balance'] = new_balance
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ–±–µ–¥–∞", win_amount, new_balance)
        
        result_text = (
            f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –≤—ã–∏–≥—Ä—ã—à +{win_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.2f} RUB."
        )
    else:
        # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ–º —Å—É–º–º—É
        loss_amount = trade_data['amount']
        new_balance = user_data['balance'] - loss_amount
        user_data['balance'] = max(0, new_balance)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", 0, user_data['balance'])
        
        result_text = (
            f"üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ -{loss_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(result_text)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in trading_states:
        del trading_states[user_id]
    if user_id in trade_message_ids:
        del trade_message_ids[user_id]

async def run_trade_timer(callback: CallbackQuery, user_id: int, total_seconds: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    
    for remaining in range(total_seconds, 0, -1):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(remaining, total_seconds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–µ—Ä–æ–º
        timer_text = (
            f"‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {trade_data['asset_name']}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
            f"–°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n"
            f"–í—Ä–µ–º—è: {remaining} —Å–µ–∫\n\n"
            f"{progress_bar}"
        )
        
        try:
            await callback.message.edit_text(
                timer_text,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            break
        
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    final_text = (
        f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n\n"
        f
```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    trade_history = load_trade_history()
    
    if str(user_id) not in trade_history or not trade_history[str(user_id)]:
        # –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        empty_text = (
            "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
        builder.adjust(1)
        
        try:
            await callback.message.edit_caption(
                caption=empty_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await callback.message.answer(
                empty_text,
                reply_markup=builder.as_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    user_trades = trade_history[str(user_id)][-10:]
    user_trades.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
    
    for trade in user_trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        trade_date = datetime.fromisoformat(trade['timestamp']).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trade['result'] == "–ü–æ–±–µ–¥–∞":
            result_emoji = "üéâ"
            result_text = f"+{trade['win_amount']:,.2f} RUB"
        else:
            result_emoji = "üò•"
            result_text = f"-{trade['amount']:,.2f} RUB"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "‚¨ÜÔ∏è" if "–í–≤–µ—Ä—Ö" in trade['direction'] else "‚¨áÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_text += (
            f"{result_emoji} <b>#{trade['id']}</b> ‚Ä¢ {trade_date}\n"
            f"üìä {trade['asset']}\n"
            f"{direction_emoji} {trade['direction']} ‚Ä¢ {trade['amount']:,.2f} RUB ‚Ä¢ {trade['time_sec']}\n"
            f"üí∞ {result_text}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_trades = len(trade_history[str(user_id)])
    wins = len([t for t in trade_history[str(user_id)] if t['result'] == "–ü–æ–±–µ–¥–∞"])
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    
    history_text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wins}/{total_trades} –ø–æ–±–µ–¥ ({win_rate:.1f}%)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile"))
    builder.adjust(1)
    
    try:
        await callback.message.edit_caption(
            caption=history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_profile(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    await show_user_profile(message)

@router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤–ª—è")
async def handle_trading_button(message: Message):
    await show_trading_categories(message)

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support_button(message: Message):
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message):
    await message.answer("eToro - –≤–µ–¥—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_investment_amount(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if user_id not in trading_states or trading_states[user_id]['step'] != 'waiting_amount':
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1 RUB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
        if amount > user_data['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_states[user_id]['amount'] = amount
        trading_states[user_id]['step'] = 'configuring'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
        await show_trade_configurator(message, user_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)")

async def show_trade_configurator(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    user_data = get_user_data(user_id)
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        config_text,
        reply_markup=builder.as_markup()
    )
    trade_message_ids[user_id] = sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
@router.callback_query(F.data.startswith("trade_set_direction:"))
async def handle_direction_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
```

```
    photo_to_send = FSInputFile(PHOTO_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ 1: URL
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è üìú",
        url="https://telegra.ph/Usloviya-servisa-eTron-10-23"
    )
    
    # –ö–Ω–æ–ø–∫–∞ 2: Callback (—Å–æ–≥–ª–∞—Å–∏–µ)
    builder.button(
        text="–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ",
        callback_data="accept_terms"
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞ (–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü)
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo_to_send,
        caption=welcome_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "accept_terms")
async def process_terms_accept(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–ª(–∞), —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) ‚úÖ"
    """
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    user_data["accepted_terms"] = True
    save_users_data()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message)

async def show_user_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏)
    current_hour = datetime.now().hour
    if 6 <= current_hour <= 22:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        online_users = random.randint(1200, 1800)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        online_users = random.randint(800, 1200)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ eToro ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user_data['pending_withdrawal']:.2f} ‚ÇΩ\n\n"
        f"üìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data['days_on_platform']} –¥.\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data['verified'] else '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n\n"
        f"üÜî ID: {user_id}\n\n"
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_users}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîº –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.add(types.InlineKeyboardButton(text="üîΩ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    builder.add(types.InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data="history"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if exists(PROFILE_PHOTO_PATH):
        photo = FSInputFile(PROFILE_PHOTO_PATH)
        await message.answer_photo(
            photo=photo,
            caption=profile_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=builder.as_markup()
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_static_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "deposit")
async def handle_deposit(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if user_data['balance'] <= 0:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    WITHDRAWAL_STATES[user_id] = {
        'step': 'amount',
        'amount': None,
        'requisites': None
    }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def handle_history(callback: CallbackQuery):
    await show_trade_history(callback)
    await callback.answer()

async def show_trade_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    direction = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    trading_states[user_id]['direction'] = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" if direction == "up" else "‚¨áÔ∏è –í–Ω–∏–∑"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

@router.callback_query(F.data.startswith("trade_set_time:"))
async def handle_time_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = callback.from_user.id
    time_sec = callback.data.split(":")[1]
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    trading_states[user_id]['time_sec'] = f"{time_sec} —Å–µ–∫"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_trade_configurator(callback, user_id)
    await callback.answer()

async def update_trade_configurator(callback: CallbackQuery, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏"""
    trade_data = trading_states[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    config_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–¥–µ–ª–∫–∏\n\n"
        f"üí∞ –°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n\n"
        f"‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {trade_data.get('direction', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {trade_data.get('time_sec', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)')}\n"
        
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data="trade_set_direction:up"))
    builder.add(types.InlineKeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑", callback_data="trade_set_direction:down"))
    builder.add(types.InlineKeyboardButton(text="10 —Å–µ–∫", callback_data="trade_set_time:10"))
    builder.add(types.InlineKeyboardButton(text="30 —Å–µ–∫", callback_data="trade_set_time:30"))
    builder.add(types.InlineKeyboardButton(text="60 —Å–µ–∫", callback_data="trade_set_time:60"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="trade_create_deal"))
    builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤–≤–æ–¥—É —Å—É–º–º—ã)", callback_data="trade_reset_to_amount"))
    builder.adjust(2, 3, 1, 1)
    
    try:
        await callback.message.edit_text(
            config_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: {e}")

@router.callback_query(F.data == "trade_reset_to_amount")
async def handle_reset_to_amount(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    trading_states[user_id]['step'] = 'waiting_amount'
    trading_states[user_id]['amount'] = None
    trading_states[user_id]['direction'] = None
    trading_states[user_id]['time_sec'] = None
    
    user_data = get_user_data(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
    reset_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB\n\nüåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    try:
        await callback.message.edit_text(
            reset_text,
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "trade_create_deal")
async def handle_create_deal(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É"""
    user_id = callback.from_user.id
    
    if user_id not in trading_states:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    trade_data = trading_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ
    if not trade_data.get('direction') or not trade_data.get('time_sec'):
        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    await execute_trade(callback, user_id)
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

async def execute_trade(callback: CallbackQuery, user_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_seconds = int(trade_data['time_sec'].split()[0])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    await run_trade_timer(callback, user_id, time_seconds)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ)
    is_win = random.choice([True, False])
    
    if is_win:
        # –ü–æ–±–µ–¥–∞ - —É–¥–≤–∞–∏–≤–∞–µ–º —Å—É–º–º—É
        win_amount = trade_data['amount']
        new_balance = user_data['balance'] + win_amount
        user_data['balance'] = new_balance
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ–±–µ–¥–∞", win_amount, new_balance)
        
        result_text = (
            f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –≤—ã–∏–≥—Ä—ã—à +{win_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.2f} RUB."
        )
    else:
        # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ–º —Å—É–º–º—É
        loss_amount = trade_data['amount']
        new_balance = user_data['balance'] - loss_amount
        user_data['balance'] = max(0, new_balance)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        save_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_trade_to_history(user_id, trade_data, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", 0, user_data['balance'])
        
        result_text = (
            f"üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ -{loss_amount:,.2f} RUB.\n\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:,.2f} RUB."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(result_text)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in trading_states:
        del trading_states[user_id]
    if user_id in trade_message_ids:
        del trade_message_ids[user_id]

async def run_trade_timer(callback: CallbackQuery, user_id: int, total_seconds: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    trade_data = trading_states[user_id]
    
    for remaining in range(total_seconds, 0, -1):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = create_progress_bar(remaining, total_seconds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–µ—Ä–æ–º
        timer_text = (
            f"‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            f"üìä –ê–∫—Ç–∏–≤: {trade_data['asset_name']}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
            f"–°—É–º–º–∞: {trade_data['amount']:,.2f} RUB\n"
            f"–í—Ä–µ–º—è: {remaining} —Å–µ–∫\n\n"
            f"{progress_bar}"
        )
        
        try:
            await callback.message.edit_text(
                timer_text,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
            break
        
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    final_text = (
        f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n\n"
        f