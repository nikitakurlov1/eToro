"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ config.py –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import hashlib

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    
    # –•–µ—à –ø–∞—Ä–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ hashlib.sha256(b"your_password").hexdigest())
    WORKER_PASSWORD_HASH = os.getenv("WORKER_PASSWORD_HASH")
    
    # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    BASE_DIR = Path(__file__).parent
    
    # –ü—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
    PHOTO_PATH = BASE_DIR / "etoro.png"
    PROFILE_PHOTO_PATH = BASE_DIR / "image copy.png"
    TRADING_PHOTO_PATH = BASE_DIR / "image copy.png"
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot.db")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    LOG_FILE = BASE_DIR / "logs" / "bot.log"
    
    # Rate limiting
    RATE_LIMIT_MESSAGES = int(os.getenv("RATE_LIMIT_MESSAGES", "5"))  # —Å–æ–æ–±—â–µ–Ω–∏–π
    RATE_LIMIT_PERIOD = int(os.getenv("RATE_LIMIT_PERIOD", "60"))  # —Å–µ–∫—É–Ω–¥
    
    # Timeout –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)
    STATE_TIMEOUT = int(os.getenv("STATE_TIMEOUT", "300"))  # 5 –º–∏–Ω—É—Ç
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
    MIN_DEPOSIT = float(os.getenv("MIN_DEPOSIT", "100.0"))
    MIN_WITHDRAW = float(os.getenv("MIN_WITHDRAW", "1000.0"))
    MIN_TRADE_AMOUNT = float(os.getenv("MIN_TRADE_AMOUNT", "1.0"))
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "eToroSupport_Official")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    CRYPTO_CURRENCIES = [
        "‚Çø Bitcoin (BTC)", "Œû Ethereum (ETH)", "‚ÇÆ Tether (USDT)", "‚Çø Bitcoin Cash (BCH)",
        "≈Å Litecoin (LTC)", "‚óä Cardano (ADA)", "‚óä Polkadot (DOT)", "‚óä Chainlink (LINK)",
        "‚óä Stellar (XLM)", "‚óä Uniswap (UNI)"
    ]
    
    RUSSIAN_STOCKS = [
        "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)", "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)", "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)", "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)",
        "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)", "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)", "üè≠ –ù–õ–ú–ö (NLMK)", "üè≠ –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)",
        "üè≠ –ú–ú–ö (MAGN)", "üè≠ –ê–õ–†–û–°–ê (ALRS)"
    ]
    
    COMMODITIES = [
        "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)", "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)", "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)", "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)",
        "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)", "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)", "‚òï –ö–æ—Ñ–µ (COFFEE)", "üç´ –ö–∞–∫–∞–æ (COCOA)",
        "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)", "üçØ –°–∞—Ö–∞—Ä (SUGAR)"
    ]
    
    ASSET_PRICES = {
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)
        "‚Çø Bitcoin (BTC)": 111700, "Œû Ethereum (ETH)": 4300, "‚ÇÆ Tether (USDT)": 1.00,
        "‚Çø Bitcoin Cash (BCH)": 450, "≈Å Litecoin (LTC)": 85, "‚óä Cardano (ADA)": 0.45,
        "‚óä Polkadot (DOT)": 5.50, "‚óä Chainlink (LINK)": 15.20, "‚óä Stellar (XLM)": 0.12,
        "‚óä Uniswap (UNI)": 9.80,
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö)
        "üõ¢Ô∏è –ì–∞–∑–ø—Ä–æ–º (GAZP)": 180, "üõ¢Ô∏è –õ—É–∫–æ–π–ª (LKOH)": 7200,
        "üè¶ –°–±–µ—Ä–±–∞–Ω–∫ (SBER)": 280, "‚ö° –†–æ—Å—Å–µ—Ç–∏ (RSTI)": 1.2, "üè≠ –ù–æ—Ä–Ω–∏–∫–µ–ª—å (GMKN)": 18000,
        "üõ¢Ô∏è –¢–∞—Ç–Ω–µ—Ñ—Ç—å (TATN)": 4200, "üè≠ –ù–õ–ú–ö (NLMK)": 180, "üè≠ –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å (CHMF)": 1200,
        "üè≠ –ú–ú–ö (MAGN)": 45, "üè≠ –ê–õ–†–û–°–ê (ALRS)": 120,
        # –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–≤ —Ä—É–±–ª—è—Ö)
        "ü•á –ó–æ–ª–æ—Ç–æ (GOLD)": 6500, "ü•à –°–µ—Ä–µ–±—Ä–æ (SILVER)": 85, "üõ¢Ô∏è –ù–µ—Ñ—Ç—å Brent (OIL)": 6500,
        "‚õΩ –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑ (GAS)": 120, "üåæ –ü—à–µ–Ω–∏—Ü–∞ (WHEAT)": 18000, "üåΩ –ö—É–∫—É—Ä—É–∑–∞ (CORN)": 15000,
        "‚òï –ö–æ—Ñ–µ (COFFEE)": 450, "üç´ –ö–∞–∫–∞–æ (COCOA)": 280, "ü•ú –°–æ–µ–≤—ã–µ –±–æ–±—ã (SOYBEAN)": 35000,
        "üçØ –°–∞—Ö–∞—Ä (SUGAR)": 65
    }
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    CRYPTO_CHART_URLS = {
        "‚Çø Bitcoin (BTC)": "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "Œû Ethereum (ETH)": "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
        "‚ÇÆ Tether (USDT)": "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
        "‚Çø Bitcoin Cash (BCH)": "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "≈Å Litecoin (LTC)": "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
        "‚óä Cardano (ADA)": "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "‚óä Polkadot (DOT)": "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
        "‚óä Chainlink (LINK)": "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "‚óä Stellar (XLM)": "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
        "‚óä Uniswap (UNI)": "https://t.me/AdelHistoryBot/vvkhjvkvllkj"
    }
    
    STOCK_CHART_URLS = [
        "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
    ]
    
    COMMODITY_CHART_URLS = [
        "https://t.me/AdelHistoryBot/vvkhjvkvllkj",
        "https://t.me/sell_bit_bot/httpscrm1nqbdonrendercom",
    ]
    
    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN must be set in environment variables")
        if not cls.WORKER_PASSWORD_HASH:
            raise ValueError("WORKER_PASSWORD_HASH must be set in environment variables")
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        cls.LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SHA-256"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    @classmethod
    def verify_password(cls, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å"""
        return cls.hash_password(password) == cls.WORKER_PASSWORD_HASH
