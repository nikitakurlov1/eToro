# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø BOT.PY
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================

import asyncio
import logging
import fcntl  # –î–ª—è Linux/Mac (–¥–ª—è Windows –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å msvcrt)
import json
from typing import Optional, Dict, Any, List
from datetime import datetime
from aiogram import Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #5: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
# ============================================

class UserStates:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ç–∏–ø–∞–º"""
    
    def __init__(self):
        self.deposit_states: Dict[int, Dict[str, Any]] = {}
        self.withdraw_states: Dict[int, Dict[str, Any]] = {}
        self.promo_states: Dict[int, Dict[str, Any]] = {}
        self.admin_states: Dict[int, Dict[str, Any]] = {}
        self.worker_auth_states: Dict[int, Dict[str, Any]] = {}
        self.card_states: Dict[int, Dict[str, Any]] = {}
        self.broadcast_states: Dict[int, Dict[str, Any]] = {}
    
    def set_deposit_state(self, user_id: int, data: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.deposit_states[user_id] = data
    
    def get_deposit_state(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return self.deposit_states.get(user_id)
    
    def clear_deposit_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.deposit_states.pop(user_id, None)
    
    def set_withdraw_state(self, user_id: int, data: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
        self.withdraw_states[user_id] = data
    
    def get_withdraw_state(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
        return self.withdraw_states.get(user_id)
    
    def clear_withdraw_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
        self.withdraw_states.pop(user_id, None)
    
    def set_promo_state(self, user_id: int, data: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        self.promo_states[user_id] = data
    
    def get_promo_state(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        return self.promo_states.get(user_id)
    
    def clear_promo_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        self.promo_states.pop(user_id, None)
    
    def set_admin_state(self, user_id: int, data: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        self.admin_states[user_id] = data
    
    def get_admin_state(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        return self.admin_states.get(user_id)
    
    def clear_admin_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        self.admin_states.pop(user_id, None)
    
    def clear_all_states(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.clear_deposit_state(user_id)
        self.clear_withdraw_state(user_id)
        self.clear_promo_state(user_id)
        self.clear_admin_state(user_id)
        self.worker_auth_states.pop(user_id, None)
        self.card_states.pop(user_id, None)
        self.broadcast_states.pop(user_id, None)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
user_states = UserStates()


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #6: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# ============================================

class SafeFileStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–∞–º–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions"""
    
    @staticmethod
    def save_json_safe(filepath: str, data: Dict[str, Any]):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
                fcntl.flock(f, fcntl.LOCK_EX)
                try:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                finally:
                    fcntl.flock(f, fcntl.LOCK_UN)
            logging.info(f"Successfully saved data to {filepath}")
        except Exception as e:
            logging.error(f"Error saving data to {filepath}: {e}")
            raise
    
    @staticmethod
    def load_json_safe(filepath: str) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
                fcntl.flock(f, fcntl.LOCK_SH)
                try:
                    data = json.load(f)
                finally:
                    fcntl.flock(f, fcntl.LOCK_UN)
            return data
        except FileNotFoundError:
            logging.warning(f"File {filepath} not found, returning empty dict")
            return {}
        except Exception as e:
            logging.error(f"Error loading data from {filepath}: {e}")
            return {}


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #8: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ============================================

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    TEMPLATES = {
        'deposit_request': (
            "üí≥ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: {user_id})\n"
            "üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ"
        ),
        'deposit_confirmed': (
            "‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
            "üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
            "üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {balance:,.2f} ‚ÇΩ"
        ),
        'deposit_rejected': (
            "‚ùå <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            "üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n\n"
            "üìã <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.\n\n"
            "üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n"
            "üì± <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @eToroSupport_Official"
        ),
        'trade_opened': (
            "üìà <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n\n"
            "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: {user_id})\n"
            "üí± <b>–ê–∫—Ç–∏–≤:</b> {asset_name}\n"
            "{direction_emoji} <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
            "‚è± <b>–í—Ä–µ–º—è:</b> {time_sec}\n"
            "üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
            "‚öñÔ∏è <b>–ü–ª–µ—á–æ:</b> x{leverage:.1f}"
        ),
        'trade_result': (
            "{result_emoji} <b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: {user_id})\n"
            "üí± <b>–ê–∫—Ç–∏–≤:</b> {asset_name}\n"
            "{direction_emoji} <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n"
            "‚è± <b>–í—Ä–µ–º—è:</b> {time_sec}\n"
            "üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
            "‚öñÔ∏è <b>–ü–ª–µ—á–æ:</b> x{leverage:.1f}\n\n"
            "üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}\n"
            "üíµ <b>{profit_loss_label}:</b> {profit_loss_text} ‚ÇΩ"
        )
    }
    
    @staticmethod
    async def send_notification(
        bot: Bot,
        recipients: List[int],
        template_name: str,
        data: Dict[str, Any],
        buttons: Optional[InlineKeyboardMarkup] = None,
        info_only: bool = False
    ):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            recipients: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ TEMPLATES
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            buttons: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            info_only: –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–º–µ—Ç–∫—É "—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        """
        if template_name not in NotificationService.TEMPLATES:
            logging.error(f"Unknown template: {template_name}")
            return
        
        text = NotificationService.TEMPLATES[template_name].format(**data)
        
        if info_only:
            text += "\n\n<i>‚ÑπÔ∏è –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"
        
        success_count = 0
        fail_count = 0
        
        for recipient_id in recipients:
            try:
                await bot.send_message(
                    chat_id=recipient_id,
                    text=text,
                    reply_markup=buttons,
                    parse_mode=ParseMode.HTML
                )
                success_count += 1
                logging.info(f"Notification '{template_name}' sent to {recipient_id}")
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                fail_count += 1
                logging.error(f"Failed to send notification to {recipient_id}: {e}")
            except Exception as e:
                fail_count += 1
                logging.error(f"Unexpected error sending to {recipient_id}: {e}")
        
        logging.info(f"Notification '{template_name}': {success_count} sent, {fail_count} failed")


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #13: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================================

async def safe_edit_message(
    callback: CallbackQuery,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: ParseMode = ParseMode.HTML,
    is_caption: bool = False
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ
    
    Args:
        callback: CallbackQuery –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HTML)
        is_caption: True –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption, False –µ—Å–ª–∏ text
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, False –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ
    """
    try:
        if is_caption:
            await callback.message.edit_caption(
                caption=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        return True
    except TelegramBadRequest as e:
        logging.warning(f"Failed to edit message: {e}, sending new message")
        try:
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return False
        except Exception as send_error:
            logging.error(f"Failed to send fallback message: {send_error}")
            return False
    except Exception as e:
        logging.error(f"Unexpected error in safe_edit_message: {e}")
        return False


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #10: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
# ============================================

def handle_telegram_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram API"""
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except TelegramBadRequest as e:
            logging.error(f"TelegramBadRequest in {func.__name__}: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        except TelegramForbiddenError as e:
            logging.error(f"TelegramForbiddenError in {func.__name__}: {e}")
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        except Exception as e:
            logging.error(f"Unexpected error in {func.__name__}: {e}", exc_info=True)
    return wrapper


# ============================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #7: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–≤–æ—Ä–∫–µ—Ä–æ–≤
# ============================================

class UserProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤)"""
    
    @staticmethod
    def check_access(user_id: int, authorized_admins: set, authorized_workers: set) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            'admin' | 'worker' | 'none'
        """
        if user_id in authorized_admins:
            return 'admin'
        elif user_id in authorized_workers:
            return 'worker'
        return 'none'
    
    @staticmethod
    async def show_user_profile(
        callback: CallbackQuery,
        target_user_id: str,
        users_data: dict,
        worker_config: dict,
        trade_history: dict,
        caller_role: str  # 'admin' or 'worker'
    ):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            callback: CallbackQuery –æ–±—ä–µ–∫—Ç
            target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            users_data: –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            worker_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
            trade_history: –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
            caller_role: –†–æ–ª—å –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ ('admin' –∏–ª–∏ 'worker')
        """
        if target_user_id not in users_data:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        user_data = users_data[target_user_id]
        user_config = worker_config.get(target_user_id, {
            'trade_mode': 'random',
            'growth_percentage': 1.0,
            'custom_balance': None
        })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        user_trades = trade_history.get(target_user_id, [])
        total_trades = len(user_trades)
        wins = len([t for t in user_trades if t['result'] == "–ü–æ–±–µ–¥–∞"])
        win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
        referrer_info = "–ù–µ—Ç"
        if user_data.get('referrer_id'):
            referrer_info = f"–í–æ—Ä–∫–µ—Ä ID: {user_data['referrer_id']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üÜî ID: {target_user_id}\n"
            f"üë§ Username: @{user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0):.2f} ‚ÇΩ\n"
            f"üìÖ –î–Ω–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data.get('days_on_platform', 0)}\n"
            f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–î–∞' if user_data.get('verified', False) else '–ù–µ—Ç'}\n"
            f"üë• –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_info}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n"
            f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
            f"–ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)\n\n"
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {user_config['trade_mode']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –º–æ–Ω–µ—Ç—ã: {user_config.get('growth_percentage', 1.0)}%"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram import types
        
        builder = InlineKeyboardBuilder()
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
        builder.add(types.InlineKeyboardButton(
            text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=f"{caller_role}_balance_{target_user_id}"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üé≤ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏",
            callback_data=f"{caller_role}_trademode_{target_user_id}"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞",
            callback_data=f"{caller_role}_coef_{target_user_id}"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"{caller_role}_message_{target_user_id}"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–ª–∏
        if caller_role == 'admin':
            builder.add(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="admin_all_users"
            ))
        else:
            builder.add(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º",
                callback_data="worker_referrals"
            ))
        
        builder.adjust(2, 2, 1, 1)
        
        await safe_edit_message(callback, text, builder.as_markup())


# ============================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï
# ============================================

"""
# –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞:
worker_states[user_id] = {'action': 'request_deposit', 'method': 'bank'}

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
user_states.set_deposit_state(user_id, {'method': 'bank'})

# –í–º–µ—Å—Ç–æ:
if user_id in worker_states and worker_states[user_id].get('action') == 'request_deposit':
    state = worker_states[user_id]

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
state = user_states.get_deposit_state(user_id)
if state:
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞

# –í–º–µ—Å—Ç–æ:
del worker_states[user_id]

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
user_states.clear_deposit_state(user_id)

# –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:
SafeFileStorage.save_json_safe(USERS_DATA_FILE, users_data)

# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:
users_data = SafeFileStorage.load_json_safe(USERS_DATA_FILE)

# –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
await NotificationService.send_notification(
    bot=bot,
    recipients=[admin_id, worker_id],
    template_name='deposit_request',
    data={
        'username': username,
        'user_id': user_id,
        'amount': amount
    },
    buttons=builder.as_markup()
)

# –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:
await safe_edit_message(
    callback=callback,
    text="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
    reply_markup=builder.as_markup(),
    is_caption=False
)
"""
